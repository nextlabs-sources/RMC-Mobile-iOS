//
//  NXRemoteViewerRenderer.m
//  nxrmc
//
//  Created by Bill (Guobin) Zhang on 6/15/17.
//  Copyright Â© 2017 nextlabs. All rights reserved.
//

#import "NXRemoteViewerRenderer.h"

#import <WebKit/WebKit.h>

#import "Masonry.h"
#import "NXMBManager.h"

#import "NXRemoteViewerLocalAPI.h"

@interface NXRemoteViewerRenderer()<WKNavigationDelegate>


@property(nonatomic, weak) UILabel *errorLabel;
@property (nonatomic, strong) UIProgressView *progressView;

@property(nonatomic, strong) NSURL *filePath;
@property(nonatomic, strong) NXSuperRESTAPIRequest *convertRequest;
@end

@implementation NXRemoteViewerRenderer

#pragma mark - Overwrite super method
- (UIView *)renderFile:(NSURL *)filePath {
    self.contentView = [super renderFile:filePath];
    if (self.contentView) {
        _filePath = filePath;
       
        WKWebViewConfiguration *config = [[WKWebViewConfiguration alloc] init];
        config.dataDetectorTypes = UIDataDetectorTypeNone;
        WKWebView *webView = [[WKWebView alloc] initWithFrame:self.contentView.frame configuration:config];
//        webView.configuration.dataDetectorTypes = UIDataDetectorTypeNone;
        //webView.scalesPageToFit = YES;
        webView.navigationDelegate = self;
        webView.opaque = NO;
        webView.backgroundColor = [UIColor whiteColor];
        webView.autoresizingMask = UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;
        [self.contentView addSubview:webView];
        [webView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.edges.equalTo(self.contentView);
        }];
        _webView = webView;
        [self.contentView sendSubviewToBack:webView];
        
        [self loadFileContent:filePath inView:self.contentView];
    }
    return self.contentView;
}
- (void)addOverlayer:(UIView *)overlay {
    if (overlay) {
        overlay.userInteractionEnabled = NO;
        overlay.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
        [self.contentView insertSubview:overlay atIndex:0];
        [self.contentView bringSubviewToFront:overlay];
        [overlay mas_makeConstraints:^(MASConstraintMaker *make) {
            make.edges.equalTo(self.contentView);
        }];
    }
}

- (void)snapShot:(getSnapshotCompletionBlock)block
{
    block([self.webView viewPrintFormatter]);
}

- (void)dealloc {
//    [self.wkWebView removeObserver:self forKeyPath:@"estimatedProgress"];
//    [_convertRequest cancelRequest];
}

#pragma mark - private method.

- (void)loadFileContent:(NSURL *)filePath inView:(UIView *)contentView {
    NXRemoteViewerLocalModel *requestModel = [[NXRemoteViewerLocalModel alloc]init];
    requestModel.fileName = filePath.lastPathComponent;
    requestModel.fileContent = [NSData dataWithContentsOfURL:filePath];
    requestModel.operations = 0; //this vaule is generated by rights.
    
    _convertRequest = [[NXRemoteViewerLocalRequest alloc]init];
    
    WeakObj(self);
//    [NXMBManager showLoading:NSLocalizedString(@"UI_COM_CONVERTING", NULL) toView:self.contentView];
    [NXMBManager showLoadingToView:self.contentView];
     [_convertRequest requestWithObject:requestModel Completion:^(NXSuperRESTAPIResponse *response, NSError *error) {
        StrongObj(self);
        dispatch_sync(dispatch_get_main_queue(), ^{
            [NXMBManager hideHUDForView:self.contentView];
            if (error) {
                [self showErrorMessage:error.localizedDescription];
                return;
            }
            
            NXRemoteViewerResponse *responseModel = (NXRemoteViewerResponse *)response;
            if (responseModel.rmsStatuCode != 200) {      
                [self showErrorMessage:responseModel.rmsStatuMessage];
                return;
            }
            [NXCommonUtils addCustomCookies:[NSURL URLWithString:responseModel.viewerURL] withCooies:responseModel.cookies];
            NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:responseModel.viewerURL]];
            [self.webView loadRequest:request];
        });
    }];
}

- (void)showErrorMessage:(NSString *)message {
    self.errorLabel.hidden = NO;
    self.errorLabel.text = message;
}

- (void)hideErrorMessage {
    self.errorLabel.hidden = YES;
}
#pragma mark - WKWebViewDelegate

- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(WKNavigation *)navigation
{
    //TODO
}

- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation
{
   // disable webview touch action
     self.webView.scrollView.maximumZoomScale = 20;
     self.webView.scrollView.minimumZoomScale = 0.1;
     
     if ([self.delegate respondsToSelector:@selector(fileRenderer:didLoadFile:error:)]) {
         dispatch_main_async_safe(^{
             [self.delegate fileRenderer:self didLoadFile:self.filePath error:nil];
         });
     }
}

- (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(WKNavigation *)navigation withError:(NSError *)error
{
 if ([self.delegate respondsToSelector:@selector(fileRenderer:didLoadFile:error:)]) {
       dispatch_main_async_safe(^{
           [self.delegate fileRenderer:self didLoadFile:self.filePath error:error];
       });
   }
}

- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(nonnull WKNavigationAction *)navigationAction decisionHandler:(nonnull void (^)(WKNavigationActionPolicy))decisionHandler {
    if (navigationAction.navigationType == WKNavigationTypeLinkActivated) {
          if ([navigationAction.request.URL isFileURL]) {
             decisionHandler(WKNavigationActionPolicyAllow);
          } else {
              //link clicked such www.google.com
            [[UIApplication sharedApplication] openURL:navigationAction.request.URL options:@{} completionHandler:nil];
            decisionHandler(WKNavigationActionPolicyCancel);
          }
      }
    decisionHandler(WKNavigationActionPolicyAllow);
}

- (void)webView:(WKWebView *)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential * _Nullable credential))completionHandler{
    
    if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {
        
        NSURLCredential *credential = [[NSURLCredential alloc]initWithTrust:challenge.protectionSpace.serverTrust];
        completionHandler(NSURLSessionAuthChallengeUseCredential,credential);
    }
}


#pragma mark

- (UILabel *)errorLabel {
    if (!_errorLabel) {
        UILabel *errorLabel = [[UILabel alloc] init];
        errorLabel.textAlignment = NSTextAlignmentCenter;
        errorLabel.lineBreakMode = NSLineBreakByWordWrapping;
        errorLabel.numberOfLines = 0;
        errorLabel.hidden = YES;
        
        [self.contentView addSubview:errorLabel];
        
        [errorLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.center.equalTo(self.contentView);
            make.width.equalTo(self.contentView).multipliedBy(0.8);
        }];
        
        _errorLabel = errorLabel;
    }
    return _errorLabel;
}

- (UIProgressView *)progressView {
    if (!_progressView) {
        UIProgressView *progressView = [[UIProgressView alloc]initWithFrame:CGRectMake(0, 0, self.contentView.bounds.size.width, 1)];
        progressView.progressTintColor = RMC_MAIN_COLOR;
        [self.contentView addSubview:progressView];
        [progressView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.and.right.and.left.equalTo(self.contentView);
            make.height.equalTo(@(2));
        }];
        _progressView = progressView;
    }
    return _progressView;
}

@end
